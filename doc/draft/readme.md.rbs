#{ gemspec.name }#{ " - #{ gemspec.summary }" if gemspec.summary }
===

#{ gemspec.description }

For example this document was rendered from [readme.md.rbs](https://github.com/lpogic/white_gold/tree/master/doc/draft/readme.md.rbs) template.

Installation
---
```
gem install #{ gemspec.name }
```

Basics
---

Rules are:
- input is interpreted line by line
- initial white spaces are ignored
- there are 3 different line types recognized by the following prefixes:
\  - `#` - a comment line skipped during compilation
\  - `|>` - a code line evaluated during compilation
\  - any other prefix - a string line with possible interpolated code (see Ruby string interpolation rules)

\#### Sample (stealed and translated from [ERB documentation](https://ruby-doc.org/stdlib-3.1.0/libdoc/erb/rdoc/ERB.html#class-ERB-label-Ruby+in+HTML)):


Template(Rebus - HTML):
```HTML
#{ File.read "sample/a0.rbs" }
```

Source code(Ruby):
#{ code.call "sample/a0.rb" }

Output(HTML):
```
<html>
  <head><title>Ruby Toys -- Rubysapien</title></head>
  <body>

    <h1>Rubysapien (TZ-1002)</h1>
    <p>Geek's Best Friend!  Responds to Ruby commands...</p>

    <ul>
        <li><b>Listens for verbal commands in the Ruby language!</b></li>
        <li><b>Ignores Perl, Java, and all C variants.</b></li>
        <li><b>Karate-Chop Action!!!</b></li>
        <li><b>Matz signature on left leg.</b></li>
        <li><b>Gem studded eyes... Rubies, of course!</b></li>
    </ul>

    <p>
         Call for a price, today!
    </p>

  </body>
</html>
```

Usage
---
#{ sample.call "Render from string, |> code lines", "sample/a1.rb" }
#{ sample.call "\#{Interpolation}, # comments", "sample/a2.rb" }
#{ sample.call "Render from IO", "sample/a3.rb" }
#{ sample.call "Binding as template context", "sample/a4.rb" }
#{ sample.call "Block argument - automatic context catching & granulated output", "sample/a5.rb" }
#{ sample.call "Object as template context", "sample/a6.rb" }
#{ sample.call "Keyword arguments as template context", "sample/a7.rb" }
#{ sample.call "File content rendering", "sample/b1.rb" }
`b.html.rbs` content:
```HTML
 #{ File.read base_dir + "/sample/b.html.rbs" }
```
#{ sample.call "Setting file home path", "sample/b2.rb" }
#{ sample.call "Debugging - exception backtrace points to broken lines", "sample/b3.rb" }
#{ sample.call "Setting template tokens", "sample/b4.rb" }

Authors
---
#{ gemspec.authors.zip(Array(gemspec.email)).map{ "- #{_1} (#{_2})" }.join("\n") }
